--address
CREATE OR REPLACE FUNCTION process_address() RETURNS TRIGGER AS $address$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO addressh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO addressh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO addressh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$address$ LANGUAGE plpgsql;
CREATE TRIGGER address
AFTER INSERT OR UPDATE OR DELETE ON address
FOR EACH ROW EXECUTE PROCEDURE process_address();

--groupstud
CREATE OR REPLACE FUNCTION process_groupstud() RETURNS TRIGGER AS $groupstud$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO groupstudh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO groupstudh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO groupstudh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$groupstud$ LANGUAGE plpgsql;
CREATE TRIGGER groupstud
AFTER INSERT OR UPDATE OR DELETE ON groupstud
FOR EACH ROW EXECUTE PROCEDURE process_groupstud();

--loading
CREATE OR REPLACE FUNCTION process_loading() RETURNS TRIGGER AS $loading$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO loadingh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO loadingh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO loadingh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$loading$ LANGUAGE plpgsql;
CREATE TRIGGER loading
AFTER INSERT OR UPDATE OR DELETE ON loading
FOR EACH ROW EXECUTE PROCEDURE process_loading();

--parents
CREATE OR REPLACE FUNCTION process_parents() RETURNS TRIGGER AS $parents$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO parentsh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO parentsh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO parentsh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$parents$ LANGUAGE plpgsql;
CREATE TRIGGER parents
AFTER INSERT OR UPDATE OR DELETE ON parents
FOR EACH ROW EXECUTE PROCEDURE process_parents();


--people
CREATE OR REPLACE FUNCTION process_people() RETURNS TRIGGER AS $people$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO peopleh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO peopleh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO peopleh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$people$ LANGUAGE plpgsql;
CREATE TRIGGER people
AFTER INSERT OR UPDATE OR DELETE ON people
FOR EACH ROW EXECUTE PROCEDURE process_people();


--rating
CREATE OR REPLACE FUNCTION process_rating() RETURNS TRIGGER AS $rating$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO ratingh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO ratingh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO ratingh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$rating$ LANGUAGE plpgsql;
CREATE TRIGGER rating
AFTER INSERT OR UPDATE OR DELETE ON rating
FOR EACH ROW EXECUTE PROCEDURE process_rating();


--student
CREATE OR REPLACE FUNCTION process_student() RETURNS TRIGGER AS $student$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO studenth SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO studenth SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO studenth SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$student$ LANGUAGE plpgsql;
CREATE TRIGGER student
AFTER INSERT OR UPDATE OR DELETE ON student
FOR EACH ROW EXECUTE PROCEDURE process_student();


--subject
CREATE OR REPLACE FUNCTION process_subject() RETURNS TRIGGER AS $subject$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO subjecth SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO subjecth SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO subjecth SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$subject$ LANGUAGE plpgsql;
CREATE TRIGGER subject
AFTER INSERT OR UPDATE OR DELETE ON subject
FOR EACH ROW EXECUTE PROCEDURE process_subject();


--teacher
CREATE OR REPLACE FUNCTION process_teacher() RETURNS TRIGGER AS $teacher$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO teacherh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO teacherh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO teacherh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$teacher$ LANGUAGE plpgsql;
CREATE TRIGGER teacher
AFTER INSERT OR UPDATE OR DELETE ON teacher
FOR EACH ROW EXECUTE PROCEDURE process_teacher();


--trainingdirection
CREATE OR REPLACE FUNCTION process_trainingdirection() RETURNS TRIGGER AS $trainingdirection$
BEGIN
IF (TG_OP = 'DELETE') THEN
INSERT INTO trainingdirectionh SELECT OLD.*,'DELETE',now();
RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
IF (OLD != NEW) THEN
INSERT INTO trainingdirectionh SELECT OLD.*,'UPDATE',now();
RETURN NEW;
END IF;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO trainingdirectionh SELECT NEW.*,'INSERT',now();
RETURN NEW;
END IF;
RETURN NULL;
END;
$trainingdirection$ LANGUAGE plpgsql;
CREATE TRIGGER trainingdirection
AFTER INSERT OR UPDATE OR DELETE ON trainingdirection
FOR EACH ROW EXECUTE PROCEDURE process_trainingdirection();